<header class="header">
  <div style="margin-bottom: 15px;">
    <a href="/editcol" class="button"> + 열 편집</a>
  </div>
  <div class="header-button">
    <a href="/logout">관리자 로그아웃</a>
  </div>
</header>

<main>
  <div role="region" aria-label="data table" tabindex="0" class="primary table-wrapper">
    <table style="margin-bottom: 15px;">
      <thead class="sticky">
        <tr>
          <% for(let i = 0; i < colNames.length; ++i) { %>
          <% let col = colNames[i]; %>
          <th style="min-width: <%= widths[i] %>px; max-width: <%= widths[i] %>px; width: <%= widths[i] %>px;"> <%= col %></th>
          <%}; %>
          <th class="bgcolor" style="border: 0"></th>
        </tr>
        <form id="myForm" action="/add" method="POST" enctype="multipart/form-data">
          <tr>
            <% for(let i = 0; i < indices.length; ++i) { %>
            <% if(isText[i] == 1) { %>
            <td style="padding: 0 3px;" class="bgcolor">
              <textarea rows="2" name="<%= i %>" style="margin: auto" class="moveable"></textarea>
              <!--<input type="text" name="<%= i %>" style="margin: auto" class="moveable">-->
            </td>
            <% } else {%>
            <td class="bgcolor">
              <div class="upload-zone">파일 업로드</div>
              <input type="hidden" name="<%= i %>" value="$file_col">
            </td>
            <% } %>
            <% } %>
            <td class="bgcolor"><input type="submit" id="submit-btn" value="등록" class="btn"></td>
          </tr>
          <tr>
            <td colspan="<%= indices.length + 2 %>">
              <div id="fileDropzone" class="dropzone fileList" style="text-align: left;"></div>
            </td>
          </tr>
        </form>
      </thead>
      <div id="loading-spinner" class="loading-spinner">
        <div>&nbsp;&nbsp;파일 업로드 중</div>
        <img src="img/progress.gif">
      </div>
      <tbody>
        <% for(let i = 0; i < rows.length; ++i) { %>
        <% const row = rows[i]; %>
        <% let f = 0; %>
        <tr>
          <% for(let j = 1; j < row.length; ++j) {%>
          <% if(row[j] == "$file_col") {%>
          <td>
            <% for(let j = 0; j < filePaths[f][i].length; ++j) { %>
            <div>
              <a href="<%= filePaths[f][i][j] %>" class="nounderline" download>첨부파일 <%=j+1%></a>
            </div>
            <% } %>
            <% ++f; %>
          </td>
          <% } else if(row[j] != null && row[j][0] == "-") {%>
          <td style="background-color: yellow; white-space: pre-line;" class="cell"> <%= row[j].slice(1) %><br> </td>
          <% } else {%>
          <td style="white-space: pre-line;" class="cell"> <%= row[j] %> </td>
          <% } %>
          <% } %>
          <td>
            <div class="admin-post-controls">
              <a href="/edit/<%= row[0] %>" class="btn" onclick="saveScrollPosition()">수정</a>
            </div>
          </td>
        </tr>
        <% }; %>
      </tbody>
    </table>
  </div>
</main>

<script>
  const cells = document.getElementsByClassName("cell");
  for (let i = 0; i < cells.length; ++i) {
    const cell = cells[i];
    const content = cell.innerHTML;

    // 정규식을 사용해 URL 찾기
    const linkedContent = content.replace(
      /(https?:\/\/\S+)/g,
      '<a href="$1" target="_blank">$1</a>'
    );

    // 변환된 내용을 다시 삽입
    cell.innerHTML = linkedContent;
  }
</script>

<script>
  window.onload = function() {
    // 세션 스토리지에서 저장된 스크롤 위치 가져오기
    const scrollY = sessionStorage.getItem("scrollY");
    const t = document.getElementsByClassName("table-wrapper")[0];
    if (scrollY) {
      // 해당 위치로 스크롤
      t.scrollTop = scrollY;
    }
  };

  function saveScrollPosition() {
    // 현재 스크롤 위치를 세션 스토리지에 저장
    const scrollY = document.getElementsByClassName("table-wrapper")[0].scrollTop;
    sessionStorage.setItem('scrollY', scrollY);
  }
</script>

<script>
  const inputs = document.querySelectorAll('.moveable');
  for (let i = 0; i < inputs.length; ++i) {
    const input = inputs[i];
    input.addEventListener('keydown', function(event) {
      const cursorPosition = input.selectionStart;
      const inputLength = input.value.length;
      // 화살표 오른쪽
      if (event.key === 'ArrowRight') {
        // 커서가 맨 오른쪽에 있을 때만 다음 input으로 포커스를 이동
        if (cursorPosition === inputLength && event.isComposing === false) {
          event.preventDefault();
          if (i < inputs.length - 1) { // i + 1 번째 input으로 이동
            inputs[i + 1].focus();
          }
        }
      }
      // 화살표 왼쪽
      if (event.key === 'ArrowLeft') {
        // 커서가 맨 왼쪽에 있을 때만 이전 input으로 포커스를 이동
        if (cursorPosition === 0 && event.isComposing === false) {
          event.preventDefault();
          if (i >= 1) { // i - 1 번째 input으로 이동
            inputs[i - 1].focus();
          }
        }
      }
    });
  }
</script>

<script>
  const myDropzone = new Dropzone("#fileDropzone", {
    url: "/upload", // 실제 파일 업로드는 여기서 하지 않음
    autoProcessQueue: false, // 자동으로 서버로 전송하지 않음
    uploadMultiple: true, // 여러 파일을 한 번에 업로드 가능
    maxFilesize: 1024, // 최대 파일 크기 (MB)
    addRemoveLinks: true, // 파일 삭제 링크 추가
    dictRemoveFile: "삭제",
    dictDefaultMessage: "여기로 파일을 드래그 앤 드롭 하세요",
    parallelUploads: 10, // 한 번에 여러 파일 처리
    showProgress: false,
    previewTemplate: `
        <div class="custom-preview">
            <span class="file-name"></span>
            <span class="file-size"></span>
        </div>
    `,
    init: function() {
      // 파일이 추가될 때마다 호출
      this.on("addedfile", function(file) {
        // 파일이 추가되면 드롭존 표시
        document.getElementById("fileDropzone").style.display = "block";
      });

      // 파일이 제거될 때마다 호출
      this.on("removedfile", function(file) {
        if (this.files.length === 0) {
          // 파일이 없으면 드롭존 숨김
          document.getElementById("fileDropzone").style.display = "none";
        }
      });
    }
  });
  myDropzone.on("addedfile", function(file) {
    const previewElement = file.previewElement;
    previewElement.querySelector(".file-name").textContent = file.name;
    previewElement.querySelector(".file-size").textContent = `(${(file.size / 1024 / 1024).toFixed(2)} MB)`;
  });

  const uploadZone = document.querySelectorAll(".upload-zone");
  let fileInput = new Array();
  for (let i = 0; i < uploadZone.length; ++i)
    fileInput.push(document.createElement("input"));
  for (let i = 0; i < fileInput.length; ++i) {
    fileInput[i].type = "file";
    fileInput[i].multiple = true;
  }
  for (let i = 0; i < uploadZone.length; ++i) {
    uploadZone[i].addEventListener("click", () => {
      fileInput[i].click();
    });
    const f = <%- JSON.stringify(fileCols) %>;
    fileInput[i].addEventListener("change", () => {
      const files = fileInput[i].files;
      for (let j = 0; j < files.length; j++) {
        const newFileName = `${f[i]}_` + files[j].name;
        const newFile = new File([files[j]], newFileName, {
          type: files[j].type
        });
        myDropzone.addFile(newFile);
      }
      fileInput.value = ""; // 파일 선택 후 input을 초기화
    });
    uploadZone[i].addEventListener("mouseover", () => {
      uploadZone[i].style.cursor = "pointer";
    });
    uploadZone[i].addEventListener("mouseout", () => {
      uploadZone[i].style.cursor = "default";
    });
    uploadZone[i].addEventListener('dragover', (e) => {
      e.preventDefault();
      uploadZone[i].style.borderColor = 'black';
    });
    uploadZone[i].addEventListener('dragleave', () => {
      uploadZone[i].style.borderColor = '#aaa';
    });
    uploadZone[i].addEventListener('drop', (e) => {
      e.preventDefault();
      uploadZone[i].style.borderColor = '#aaa';
      const files = e.dataTransfer.files;
      for (let j = 0; j < files.length; j++) {
        const newFileName = `${f[i]}_` + files[j].name;
        const newFile = new File([files[j]], newFileName, {
          type: files[j].type
        });
        myDropzone.addFile(newFile);
      }
    });
  }

  document.getElementById("myForm").addEventListener("submit", function(e) {
    document.getElementById("loading-spinner").style.display = "block";
    document.getElementById("submit-btn").disabled = true;

    // Dropzone의 파일을 폼 데이터에 추가
    myDropzone.files.forEach((file) => {
      const dataTransfer = new DataTransfer(); // 데이터 전송 객체 생성
      dataTransfer.items.add(file); // 파일 추가
      myDropzone.removeFile(file); // Dropzone에서 파일 제거
      const fileInput = document.createElement("input");
      fileInput.type = "file";
      fileInput.name = "files"; // 파일 배열로 전송
      fileInput.files = dataTransfer.files; // 파일을 FileList로 설정
      this.appendChild(fileInput); // 동적으로 폼에 추가
    });

    this.submit();
  });
</script>